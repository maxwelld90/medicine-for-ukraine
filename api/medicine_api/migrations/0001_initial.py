# Generated by Django 4.0.3 on 2022-04-05 12:14

from django.db import migrations, models
import django.db.models.deletion
import medicine_api.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('code', medicine_api.models.LowercaseCharField(help_text='The country code (e.g., pl for Poland). Codes are converted to lowercase automatically.', max_length=5, primary_key=True, serialize=False)),
                ('names', models.JSONField(default=medicine_api.models.get_default_language_dict, help_text='The name of the country, in each of the languages required.', validators=[medicine_api.models.validate_language_dict])),
                ('flag_url', models.CharField(help_text="What is the filename of the country's flag?", max_length=256, unique=True)),
            ],
            options={
                'verbose_name': 'Country',
                'verbose_name_plural': 'Countries',
            },
        ),
        migrations.CreateModel(
            name='LinkMetadata',
            fields=[
                ('url', models.URLField(primary_key=True, serialize=False)),
                ('price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('last_checked', models.DateTimeField()),
                ('in_stock', models.BooleanField()),
                ('ships_to', models.ManyToManyField(blank=True, related_name='ships_to', to='medicine_api.country')),
            ],
            options={
                'verbose_name': 'Link Metadata',
                'verbose_name_plural': 'Crawled Link Metadata',
            },
        ),
        migrations.CreateModel(
            name='Recipient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('names', models.JSONField(default=medicine_api.models.get_default_language_dict, help_text='The name of the recipient, in different languages. At a minimum, specify EN.', validators=[medicine_api.models.validate_language_dict])),
                ('tagline', models.JSONField(default=medicine_api.models.get_default_language_dict, help_text="The tagline, providing a short description to entice users to click the recipient's link. What items are being sought?", validators=[medicine_api.models.validate_language_dict])),
                ('password', models.CharField(blank=True, help_text="If the recipient's warehouse address should not be publicly made available, specify a password here to unlock the address. This is NOT encrypted.", max_length=50, null=True)),
                ('email', models.EmailField(blank=True, help_text='Specify the e-mail address to send alerts to when items are requested by users.', max_length=254, null=True)),
                ('is_active', models.BooleanField(help_text='Is the recipient currently looking for items? This will hide the recipient from the list if not checked.')),
            ],
            options={
                'verbose_name': 'Recipient',
                'verbose_name_plural': 'Recipients',
            },
        ),
        migrations.CreateModel(
            name='Sheet',
            fields=[
                ('name', medicine_api.models.LowercaseCharField(max_length=100, primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'Sheet',
                'verbose_name_plural': 'Sheets',
            },
        ),
        migrations.CreateModel(
            name='Warehouse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='The unique identifier for the warehouse.', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='A name for the warehouse location to identify it.', max_length=300)),
                ('address', models.TextField(help_text='The address for delivery to this warehouse.')),
                ('country', models.ForeignKey(help_text='The country in which this warehouse is located.', on_delete=django.db.models.deletion.CASCADE, to='medicine_api.country')),
            ],
            options={
                'verbose_name': 'Warehouse',
                'verbose_name_plural': 'Warehouses',
            },
        ),
        migrations.CreateModel(
            name='UserRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('date_time', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('is_approved', models.BooleanField(default=False, help_text='If the items have been approved, this should be checked to reflect that.')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='medicine_api.recipient')),
            ],
            options={
                'verbose_name': 'Submitted Request/Donation',
                'verbose_name_plural': 'Submitted Requests/Donations',
            },
        ),
        migrations.CreateModel(
            name='StoreSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('store_domain', models.TextField()),
                ('user_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='medicine_api.userrequest')),
            ],
        ),
        migrations.CreateModel(
            name='Screenshot',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('image', models.ImageField(upload_to='screenshots/')),
                ('store_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='medicine_api.storesession')),
            ],
            options={
                'verbose_name': 'Screenshot',
                'verbose_name_plural': 'Screenshots',
            },
        ),
        migrations.CreateModel(
            name='RequestedItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('quantity', models.IntegerField()),
                ('row_number', models.IntegerField()),
                ('price_at_purchase', models.DecimalField(decimal_places=2, max_digits=6)),
                ('store_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='medicine_api.storesession')),
                ('url', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='medicine_api.linkmetadata')),
            ],
            options={
                'verbose_name': 'Requested Item Record',
                'verbose_name_plural': 'Requested Item Records',
            },
        ),
        migrations.AddField(
            model_name='recipient',
            name='sheet',
            field=models.ForeignKey(help_text='The name (tab) of the sheet on the Google Sheets spreadsheet file to use.', on_delete=django.db.models.deletion.CASCADE, to='medicine_api.sheet'),
        ),
        migrations.AddField(
            model_name='recipient',
            name='warehouse',
            field=models.ForeignKey(help_text='The warehouse address to ship items for this recipient to.', on_delete=django.db.models.deletion.CASCADE, to='medicine_api.warehouse'),
        ),
        migrations.CreateModel(
            name='ContactInformation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('string', models.JSONField()),
                ('url', models.URLField()),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='medicine_api.recipient')),
            ],
            options={
                'verbose_name': 'Contact Information Link',
                'verbose_name_plural': 'Contact Information Links',
            },
        ),
    ]
